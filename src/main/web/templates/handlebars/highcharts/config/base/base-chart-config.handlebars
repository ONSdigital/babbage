{{!--
This template forms a base configuration for all chart types, this is included in client side as javascript source file. 
It is used to render highchart configuration and attach it to window object when run in a browser. Since Highcharts configurations are javascript objects it is not possible to read complex chart configurations ( objects with functions as members) as json objects, that is why it has to be rendered dynamically as a javascript source file.
The chart configurations are used both by Babbage and Florence, thats why it is rendered on server side using handlebars to make it possible to edit configuration without the need of rebuilding.
--}}
(function(){

	Highcharts.setOptions({lang: {thousandsSep: ','}});

	// Highlight colour
	{{#if_eq palette "default"}}HIGHLIGHT_COLOUR  = 'gold';{{else}}
	var HIGHLIGHT_COLOUR  = 'rgba(243,148,49,0.9)';{{/if_eq}}


	var PLOTBAND_COLOUR  = '#B5CE94';

	// use rgba in order to set opacity/alpha
	// alpha value set in _loadChartBuilder.js ({{alpha}})
	// set it here in js for existing charts
	var alpha = {{#if alpha }}{{alpha}}{{else}}0.3{{/if}};

	var default_palette = [
			'rgba(39,71,150,0.9)',
			'rgba(245,148,47,0.9)',
			'rgba(231,63,64,0.9)',
			'rgba(123,202,226,0.9)',
			'rgba(151,151,150,0.9)',
			'rgba(233,225,23,0.9)',
			'rgba(116,182,48,0.9)',
			'rgba(103,71,150,0.9)',
			'rgba(189,91,158,0.9)'
		];
	var bluemono = [
			'rgba(0,100,164,0.9)',
			'rgba(170,214,232,0.9)',
			'rgba(17,41,65,0.9)',
			'rgba(0,159,227,0.9)',
			'rgba(91,197,242,0.9)'
		];
	var color = [
			'rgba(25,150,163,0.9)',		// aqua
			'rgba(241,196,16,0.9)',		// gold
			'rgba(17,41,65,0.9)',		// dk blue
			'rgba(91,190,225,0.9)',		// lt blue
			'rgba(0,104,168,0.9)'		// blue
		];

	var base = {{#if yMin }}{{yMin}}{{else}}0{{/if}};


	// set chart palette based on chart object
	var palette = default_palette;
	{{#if_eq palette "blue"}}palette = bluemono;{{/if_eq}}
	{{#if_eq palette "colour"}}palette = color;{{/if_eq}}

	var hasTooltip = {{#if showTooltip }}true{{else}}false{{/if}};

	{{!-- check for annotations in order to  initialise the chart notes --}}
	var isEditor = $('#note-x-0').val() || false;
	if(isEditor) isEditor = true;

	{{#if hasLineBreak }}
		{{> highcharts/config/line-break-config}}
	{{/if}}

	// set the vars on the page as a way of passing them back to the chart object
	function setBoxPosHandle(id, x,y) {
		// important! trigger the change event after setting the value
		$('#note-x-'+id).val(x).change();
		$('#note-y-'+id).val(y).change();
	}


	{{!-- chart-config block is to be overriden by chart types inheriting this template --}}
	var options = {
		chart: {
			height: {{width}} * {{aspectRatio}},
			width: {{width}},
			marginRight: 35,
			marginTop: 50,
			style: {
				fontFamily: '"Open Sans", Tahoma, Verdana, Arial'
			}
		},
		colors: palette,
		series: [],
		title: {
			text: ""
		},
		yAxis: {
			plotBands:[],
			plotLines:[],
			{{#if yMin }}min: base,{{/if}}
			{{#if yMax }}max: {{yMax}},{{/if}}
			{{#if hasLineBreak }}breaks: [{
		                from: yAxisBreakStart,
		                to: yAxisBreakEnd
		    	}], {{/if}}
			title: {
				text: "{{{sub (sup unit)}}}",
				useHTML:true,
				align:"high"
			},
			labels: {
				format: "{value:,.{{decimalPlacesYaxis}}f}",
				useHTML:true
			},
			//gridZIndex: -200,
			opposite:{{#if_eq yAxisPos "right"}}true{{else}}false{{/if_eq}},
			{{#if yMax }}endOnTick: false,// avoids label rounding in order to have exact axis values{{/if}}
			{{#if hasLineBreak }}lineColor: 'black',
			lineWidth: 1,    
			events: {
				pointBreak: pointBreakColumn
			}{{/if}}
		},
		xAxis: {
			plotBands:[],
			plotLines:[],
			categories: [{{#each categories}}'{{{sub (sup this)}}}',{{/each}}],
			tickInterval: "{{labelInterval}}",
			labels: {
				//rotation:360,
				useHTML : true,
				step:"{{labelInterval/4}}"
			},
			title: {
				useHTML:true,
				text: "{{{sub (sup xAxisLabel)}}}"
			},
			opposite:{{#if_eq xAxisPos "top"}}true{{else}}false{{/if_eq}}
		},
		legend: {
			verticalAlign: {{#if_eq xAxisPos "top"}}"bottom"{{else}}"top"{{/if_eq}},
			y:-20,
			useHTML:true,
			enabled:{{#if_eq series.size 1}}false{{else}}true{{/if_eq}}
		},
		plotOptions: {
			series: { {{#if isStacked }}
				stacking: 'normal',{{/if}}
				borderWidth:0,
				animation: false,
				pointPadding: 0,
				groupPadding: 0.1,{{#if hasConnectNull}}
				connectNulls: true{{/if}}
			},
			line: {
				lineWidth: 2,
				marker: {
					enabled:{{#if showMarker }}true{{else}}false{{/if}},
					radius: 2,
					symbol: "circle"
				}
			},
			area: {
				stacking: "normal"
			}
		},
		annotationsOptions: {
			enabledButtons: false 
		},
		annotations: [ 
		{{#each annotations}}{{!--// only show if annotation is NOT hidden --}}
			{{#if_ne isHidden true}}
			{{#if_ne isPlotline true}}
			{
				id:{{id}},
				x: ({{x}}),
				y: ({{y}}),
				title: '{{{title}}}',
				anchorX: "left",
				anchorY: "top",
				allowDragY: isEditor,
				allowDragX: isEditor,
				shape: {
					type: 'rect',
					params: {
						x: 0,
						y: 0,
						width: {{width}},
						height: {{height}},
						stroke:'none'
					}
				},
				events: {
					mouseup: function(e) { 
						// catch errors with zero or undefined values from dragging and clicking
						if( (this.transX!==0 && this.transY!==0) && (this.transX!== undefined && this.transY!==undefined)){
							setBoxPosHandle(this.options.id, this.transX, this.transY)
						}
						if (this.chart.selectedAnnotation) {
							this.chart.selectedAnnotation.events.deselect.call(this.chart.selectedAnnotation, e);
						}
					} 
				}{{#if devices}},
				position_sm:{x:{{devices.sm.x}}, y:{{devices.sm.y}} },
				position_md:{x:{{devices.md.x}}, y:{{devices.md.y}} },
				position_lg:{x:{{devices.lg.x}}, y:{{devices.lg.y}} }{{/if}}
			},
	        {{/if_ne}}
	       {{/if_ne}}
		{{/each }}
		],
		//add devices property -not used by highcharts but stores layout sizes
		devices:{
		{{#if devices}}
			{{#each devices as |device name|}}
			'{{name}}': {
					aspectRatio: {{aspectRatio}},
					labelInterval: {{#if labelInterval }}{{labelInterval}}{{else}}0{{/if}},
					isHidden: {{isHidden}}
				},
			{{/each}}
		{{/if}}

		},
		tooltip: {
			valueDecimals: "{{decimalPlaces}}",
			shared: true,
			useHTML:true,
			style: {
				padding: 0
			},
			formatter: function() {
				{{!-- leave the tooltip toggle here then can set in the page?
				better to render it earlier as it is done on the server  --}}
				if (hasTooltip) {
					var div = '<div id="custom-tooltip"><div class="maintext">';
					{{#block "tooltip-config"}}
					var str = '<b>'+ this.x +'</b>';
					$.each(this.points, function(i, point) {
						str += '<br/><span style="color:'+ point.series.color +'">\u25CF</span> ' + point.series.name + ': ' + point.y{{#if decimalPlaces}}.toFixed({{decimalPlaces}}){{/if}};
					});
					{{/block}}
					div += str + '</div></div>';
					return div;
				}else{
					return false;
				}
			},
			backgroundColor: 'rgba(208,210,211, 1)',
			borderWidth: 0,
			borderRadius: 0,
			borderColor: 'rgba(255, 255, 255, 0)',
			shadow: false
		},
		credits: {
			enabled: false
		},
		labels: {
			useHTML:true
		}
	};

{{!--  loop through annotations and push any plotlines/bands into the array  --}}
{{#each annotations}}
{{#if_ne isHidden true}}
	{{#if_eq isPlotline true}}
	{{#if bandWidth}}
	options.{{#if_eq orientation "x-axis"}}xAxis{{else}}yAxis{{/if_eq}}.plotBands.push( 
		{
			color: PLOTBAND_COLOUR, 
			from: {{#if_eq orientation "x-axis"}}{{x}}{{else}}{{y}}{{/if_eq}},
			to: ({{#if_eq orientation "x-axis"}}{{x}}{{else}}{{y}}{{/if_eq}} + {{bandWidth}}),
			label: {
				text: '{{{title}}}' 
			},
			position_sm:{x:{{devices.sm.x}}, y:{{devices.sm.y}} },
			position_md:{x:{{devices.md.x}}, y:{{devices.md.y}} },
			position_lg:{x:{{devices.lg.x}}, y:{{devices.lg.y}} }
		})
	{{else}}
	options.{{#if_eq orientation "x-axis"}}xAxis{{else}}yAxis{{/if_eq}}.plotLines.push(
		{
			color: PLOTBAND_COLOUR, 
			value: {{#if_eq orientation "x-axis"}}{{x}}{{else}}{{y}}{{/if_eq}},
			width:2,
			label: {
				text: '{{{title}}}' 
			},
			position_sm:{x:{{devices.sm.x}}, y:{{devices.sm.y}} },
			position_md:{x:{{devices.md.x}}, y:{{devices.md.y}} },
			position_lg:{x:{{devices.lg.x}}, y:{{devices.lg.y}} }
		})
	{{/if}}
	{{/if_eq}}
{{/if_ne}}
{{/each}}


	{{#unless rotated}}
	options.yAxis.title.y = {{#if_eq xAxisPos "top"}}({{width}} * {{aspectRatio}}-55){{else}}-8{{/if_eq}};
	options.yAxis.title.offset = 
    {{#if_eq xAxisPos "top"}}
    	{{#if_eq yAxisPos "left"}}-7{{else}}-120{{/if_eq}}
    {{else}}
    	{{#if_eq yAxisPos "left"}}0{{else}}-50{{/if_eq}}
    {{/if_eq}};

    {{#if options.legend.enabled}}options.yAxis.title.y=-2;{{/if}}
    {{!-- Setting rotation to 0 causes axis label to push chart to the right for some text (e.g. "GDP growth percentage" ) and shrinks it in size. Funny enough, rotating 360 degrees eliminates this issue and still keeps the label horizontal.  --}}
	options.yAxis.title.rotation=360;
	options.yAxis.title.style={
		left:"0px",
		right:"0px"
	};

	{{/unless}}

	{{#block "chart-config"}}
	{{!-- Override this block for altering chart configuration for individual chart types --}}
	{{/block}}

	{{!-- Chart id is the file name for Florence chart builder generated charts, and cdid for time series --}}
	var chartId = "{{#if filename}}{{filename}}{{else}}{{description.cdid}}{{/if}}";
	{{!-- attaching id to window object to be used on client side --}}
	window["chart-" + chartId] = options;
	{{!-- Returning chart to be used by highcharts export server for server side image rendering --}}
	return options;

{{!-- Don't add semi-colon at end of closing brackets below - it breaks server-side rendering --}}
})()